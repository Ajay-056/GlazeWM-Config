# Yaml is white-space sensitive (use 2 spaces to indent).

# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar --args <ARGS...>'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ["self"]
  # Width of the window in physical pixels.
  width: "{{ Number(self.args.MONITOR_WIDTH) - 10}}"
  # Height of the window in physical pixels.
  height: "48"
  # X-position of the window in physical pixels.
  position_x: "{{ Number(self.args.MONITOR_X) + 5}}"
  # Y-position of the window in physical pixels.
  position_y: "{{ Number(self.args.MONITOR_Y) + 10}}"
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: "normal"
  # Whether the window should be shown in the taskbar.
  shown_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";
  # CSS styles to apply to the root element within the window. Using CSS
  # nesting, we can also target nested elements (e.g. below we set the
  # color and margin-right of icons).
  styles: |
    display: grid;
    grid-template-columns: 1fr 0.5fr 1fr;
    align-items: center;
    height: 100%;
    font-family: CaskaydiaCove Nerd Font SemiBold, monospace;
    font-size: 13px;
    padding: 5px 8px;
    background: #2b2b2b;
    border: 2px solid lightgreen;
    border-radius: 13px;

    i {
      margin-right: 8px;
    }

  group/left:
    styles: |
      display: flex;
      align-items: center;

    # template/logo:
    #   styles: |
    #     margin-right: 20px;
    #   template: |
    #     <i class="nf nf-fa-windows"></i>

    template/glazewm_workspaces:
      styles: |
        display: flex;
        align-items: center;

        .workspace {
          background: rgb(255 255 255 / 6%);
          color: white;
          border: none;
          border-radius: 30px;
          cursor: pointer;

          &.displayed {
            background: rgb(255 255 255 / 15%);
          }

          &.focused,
          &:hover {
            background: yellow; 
            color: black;
            border: 1px solid red;
          }
        }

        .workspace:not(:nth-child(7)) {
          margin-right: 15px;
        }

      providers: ["glazewm"]
      events:
        - type: "click"
          fn_path: "script.js#focusWorkspace"
          selector: ".workspace"
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
          >
            {{ workspace.displayName ?? workspace.name }}
          </button>
        }
    # template/title:
    #   styles: |
    #     # color: var(--Rosewater)
    #   providers: ["glazewm"]
    #   template: |
    #     @if ( glazewm.focusedContainer.type === 'window') {
    #       <span class="current-window"> {{ glazewm.focusedContainer.title }} </span>
    #     } @else {
    #       <span class="current-window"></span>
    #     }
  group/center:
    styles: |
      justify-self: end;
      color: white;
      font-size: 15px;

    template/clock:
      providers: ["date"]
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      template: |
        {{ date.toFormat(date.now, 'EEE	dd MMM hh:mm:ss a') }}

  group/right:
    styles: |
      display: flex;
      justify-content: end;
      align-items: center;

      .template {
          background: rgb(255 255 255 / 10%);
          margin: 0px 8px;
          padding: 2px 6px;
          display: flex;
          align-items: center;
          justify-content: space-between;
          border-radius: 30px;
          }

    template/glazewm_other:
      providers: ["glazewm"]
      styles: |
        display: flex;

        .binding-mode, .tiling-direction {
          color: white;
        }

        .binding-mode {
          margin-right: 15px;
        }

      template: |
        @for (bindingMode of glazewm.bindingModes) {
          <div class="binding-mode">
            {{ bindingMode.displayName ?? bindingMode.name }}
          </div>
        }

        @if (glazewm.tilingDirection === 'horizontal') {
          <div class="tiling-direction nf nf-md-swap_horizontal"></div>
        } @else {
          <div class="tiling-direction nf nf-md-swap_vertical"></div>
        }

    template/network:
      providers: ["network"]
      styles: |
        color: white;
        padding:0;

      template: |
        <!-- Show icon based on signal strength. -->
        @if (network.defaultInterface?.type === 'ethernet') {
          <i class="nf nf-md-ethernet_cable"></i>
        } @else if (network.defaultInterface?.type === 'wifi') {
          @if (network.defaultGateway?.signalStrength >= 80) {<i class="nf nf-md-wifi_strength_4"></i>}
          @else if (network.defaultGateway?.signalStrength >= 65) {<i class="nf nf-md-wifi_strength_3"></i>}
          @else if (network.defaultGateway?.signalStrength >= 40) {<i class="nf nf-md-wifi_strength_2"></i>}
          @else if (network.defaultGateway?.signalStrength >= 25) {<i class="nf nf-md-wifi_strength_1"></i>}
          @else {<i class="nf nf-md-wifi_strength_outline"></i>}
          Wifi
        } @else {
          <i class="nf nf-md-wifi_strength_off_outline"></i>
        }

    template/cpu:
      providers: ["cpu"]
      styles: |
        div {
          display: flex;
          align-items: center;
          color: #1E90FF;
        }

        .high-usage {
          color: #900029;
        }
      template: |
        <div><i class="nf nf-oct-cpu"></i>

        <!-- Change the text color if the CPU usage is high. -->
        @if (cpu.usage > 85) {
          <span class="high-usage">{{ Math.round(cpu.usage) }}%</span>
        } @else {
          <span>{{ Math.round(cpu.usage) }}%</span>
        } </div>

    template/memory:
      providers: ["memory"]

      styles: |
        div {
          display: flex;
          align-items: center;
          color: violet;
          
        }

      template: |
        <div><i class="nf nf-fae-chip"></i> {{ Math.round(memory.usage) }}%</div>

    template/battery:
      providers: ["battery"]
      styles: |
        position: relative;

        .charging-icon {
          position: absolute;
          font-size: 11px;
          left: 14px;
          top: 6px;
          color: #FF5733;
        }

        .orange {
          color: #ffa500;
        }

        .red {
          color: #ff4500;
        }

        .green {
          color: #33ff57;
        }

      template: |
        <!-- Show icon for whether battery is charging. -->
        @if (battery.isCharging) {<i class="nf nf-md-power_plug charging-icon"></i>}

        <!-- Show icon for how much of the battery is charged. -->
        @if (battery.chargePercent > 90 && battery.state === "discharging") {<i class="nf nf-fa-battery_4 orange"></i> <span class="orange">{{ Math.round(battery.chargePercent) }}%</span>}
        @else if (battery.chargePercent > 70 && battery.state === "discharging") {<i class="nf nf-fa-battery_3 orange"></i> <span class="orange">{{ Math.round(battery.chargePercent) }}%</span>}
        @else if (battery.chargePercent > 40 && battery.state === "discharging") {<i class="nf nf-fa-battery_2 orange"></i> <span class="orange">{{ Math.round(battery.chargePercent) }}%</span>}
        @else if (battery.chargePercent > 20 && battery.state === "discharging") {<i class="nf nf-fa-battery_1 orange"></i> <span class="orange">{{ Math.round(battery.chargePercent) }}%</span>}
        @else if (battery.chargePercent < 20 && battery.state === "discharging") {<i class="nf nf-fa-battery_0"></i>  <span class="red">{{ Math.round(battery.chargePercent) }}%</span>}
        @else {<i class="nf nf-fa-battery_4 green"></i> <span class="green">{{ Math.round(battery.chargePercent) }}%</span>}
